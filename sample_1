import nltk
import re
from nltk.corpus import words

# Download NLTK words corpus
nltk.download('words')
valid_words = set(words.words())

def split_into_words(text):
    result = []
    
    # First, use regex to split alphanumeric parts and numbers
    # Match sequences like 'O2', 'H2O', '123', 'CamelCase' etc.
    parts = re.findall(r'[A-Za-z]+\d+[A-Za-z]*|\d+|[A-Za-z]+', text)

    for part in parts:
        # If the part contains numbers mixed with letters (like O2), keep them intact
        if re.match(r'^[A-Za-z]*\d+[A-Za-z]*$', part):
            result.append(part)
        # If the part is a valid word, add it
        elif part.lower() in valid_words:
            result.append(part)
        else:
            # For mixed or camel case parts like 'SaturatedQuantity'
            temp = []
            j = 0
            while j < len(part):
                match = ''
                # Try to match valid words
                for k in range(len(part), j, -1):
                    if part[j:k].lower() in valid_words:
                        match = part[j:k]
                        temp.append(match)
                        j = k
                        break
                # If no match, split by camel case
                if not match:
                    # Split by capital letters
                    camel_parts = re.findall(r'[A-Z][a-z]*|[a-z]+', part[j:])
                    temp.extend(camel_parts)
                    break
            result.extend(temp)

    return ' '.join(result)

# Test cases
print(split_into_words('SIGNATURESOURCECODE1'))  # OUTPUT: SIGNATURE SOURCE CODE 1
print(split_into_words('O2saturatedquantity'))    # OUTPUT: O2 Saturated quantity
print(split_into_words('H2OisEssential'))        # OUTPUT: H2O is Essential
