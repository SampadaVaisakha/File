from difflib import SequenceMatcher

def fuzzy_match(a, b, threshold=0.8):
    return SequenceMatcher(None, a, b).ratio() >= threshold

def is_match(full_term, shortcut):
    full_term = full_term.lower().replace(" ", "_")
    shortcut = shortcut.lower()
    shortcut_parts = shortcut.split('_')
    full_term_parts = full_term.split('_')

    suffix_to_check = shortcut_parts[-len(full_term_parts):]
    if all(fuzzy_match(a, b) for a, b in zip(full_term_parts, suffix_to_check)):
        return True

    for ft_part in full_term_parts:
        if any(fuzzy_match(ft_part, sc_part) for sc_part in shortcut_parts):
            return True
    
    return False

print(is_match("First Name", "src_mbr_frst_nm")) 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

import pandas as pd
from difflib import SequenceMatcher

# Fuzzy match function with similarity score
def fuzzy_match(a, b):
    return SequenceMatcher(None, a, b).ratio()

# Function to find top 5 matches for each value
def find_top_matches(source_values, target_values, top_n=5):
    results = []
    
    for source_val in source_values:
        matches = []
        
        for target_val in target_values:
            score = fuzzy_match(source_val, target_val)
            matches.append((target_val, score))
            
        # Sort matches by score (descending) and keep the top N
        matches = sorted(matches, key=lambda x: x[1], reverse=True)[:top_n]
        
        for match in matches:
            results.append({
                'Source Value': source_val,
                'Matched Value': match[0],
                'Score': match[1]
            })
    
    return results


# Load Excel files
source_df = pd.read_excel(r"C:\Users\tejas\Source.xlsx")
target_df = pd.read_excel(r"C:\Users\tejas\Destination.xlsx")

# Extract the relevant columns
source_values = source_df['Logical Column Name'].astype(str).str.lower().tolist()
target_values = target_df['Column Name'].astype(str).str.lower().tolist()

# Find matches
matches = find_top_matches(source_values, target_values)

# Convert results to DataFrame and save to Excel
matches_df = pd.DataFrame(matches)
# matches_df.to_excel('matched_results.xlsx', index=False)

matches_df
_____________________________________________________________________________________________________________________
_____________________________________________________________________________________________________________________

# NO MATCH VALUES CODE

import pandas as pd
from difflib import SequenceMatcher
import re

# Fuzzy match function with similarity score
def fuzzy_match(a, b):
    return SequenceMatcher(None, a, b).ratio()

# Preprocessing function to clean and normalize strings
def preprocess_string(s):
    # Convert to lowercase
    s = s.lower()

    return s

# Function to find top 5 matches for each value
def find_top_matches(source_values, target_values, top_n=5, threshold=0.5):
    results = []
    
    # Remove duplicates to avoid unnecessary repeats
    source_values = list(set(source_values))
    target_values = list(set(target_values))
    
    # Preprocess values for better matching
    source_values = [preprocess_string(val) for val in source_values]
    target_values = [preprocess_string(val) for val in target_values]
    
    for source_val in source_values:
        matches = []
        
        for target_val in target_values:
            score = fuzzy_match(source_val, target_val)
            if score >= threshold:  # Only consider matches above the threshold
                matches.append((target_val, score))
        
        # Sort matches by score (descending) and keep the top N
        matches = sorted(matches, key=lambda x: x[1], reverse=True)[:top_n]
        
        # If no matches found above the threshold, return 'No Match'
        if not matches:
            matches = [('No Match', 0)]
        
        for match in matches:
            results.append({
                'Source Value': source_val,
                'Matched Value': match[0],
                'Score': match[1]
            })
    
    return results

# Load Excel files
source_df = pd.read_excel(r"C:\Users\tejas\Source.xlsx")
target_df = pd.read_excel(r"C:\Users\tejas\Destination.xlsx")

# Extract the relevant columns
source_values = source_df['Logical Column Name'].astype(str).tolist()
target_values = target_df['Column Name'].astype(str).tolist()

# Find matches
matches = find_top_matches(source_values, target_values)

# Convert results to DataFrame and save to Excel
matches_df = pd.DataFrame(matches)
matches_df

_____________________________________________________________________________________________________________________
_____________________________________________________________________________________________________________________
# Unmatched values df

import pandas as pd
from difflib import SequenceMatcher

# Fuzzy match function with similarity score
def fuzzy_match(a, b):
    return SequenceMatcher(None, a, b).ratio()

# Function to find top matches for each value with a dynamic threshold
def find_top_matches(source_values, target_values, target_attr_values, top_n=5, threshold=0.6):
    above_threshold = []  # Matches with score >= threshold
    unmatched_values = []  # Values from source that don't have any match above threshold

    for source_val in source_values:
        matches = []
        has_valid_match = False  # Flag to track if the value has a valid match
        
        # First, try comparing column name in target to logical column name in source
        for target_val in target_values:
            score = fuzzy_match(source_val, target_val)
            matches.append((target_val, score))
        
        # Sort matches by score (descending) and keep the top N
        matches = sorted(matches, key=lambda x: x[1], reverse=True)[:top_n]
        
        # Check if any match is above threshold
        for match in matches:
            if match[1] >= threshold:
                above_threshold.append({
                    'Source Value': source_val,
                    'Matched Value': match[0],
                    'Score': match[1]
                })
                has_valid_match = True  # Mark that we found a valid match
        
        # If no valid match from column name, compare with attribute name in target
        if not has_valid_match:
            for target_attr_val in target_attr_values:
                score = fuzzy_match(source_val, target_attr_val)
                matches.append((target_attr_val, score))
            
            # Sort matches again and check for matches above threshold
            matches = sorted(matches, key=lambda x: x[1], reverse=True)[:top_n]
            
            for match in matches:
                if match[1] >= threshold:
                    above_threshold.append({
                        'Source Value': source_val,
                        'Matched Value': match[0],
                        'Score': match[1]
                    })
                    has_valid_match = True  # Mark that we found a valid match
        
        # If no valid match, add the source value to unmatched_values
        if not has_valid_match:
            unmatched_values.append(source_val)

    return above_threshold, unmatched_values


# Load Excel files
source_df = pd.read_excel(r"C:\Users\tejas\Source.xlsx")
target_df = pd.read_excel(r"C:\Users\tejas\Destination.xlsx")

# Extract the relevant columns
source_values = source_df['Logical Column Name'].astype(str).str.lower().tolist()
target_values = target_df['Column Name'].astype(str).str.lower().tolist()
target_attr_values = target_df['Attribute Name'].astype(str).str.lower().tolist()

# Set threshold value (adjust this value as needed)
threshold_value = 0.5  # For example, 50% threshold for matching

# Find matches based on threshold
above_matches, unmatched_values = find_top_matches(source_values, target_values, target_attr_values, threshold=threshold_value)

# Convert results to DataFrame and save to Excel
above_matches_df = pd.DataFrame(above_matches)
unmatched_values_df = pd.DataFrame(unmatched_values, columns=['Unmatched Values'])

# Optionally, save the results to Excel (uncomment to save)
# above_matches_df.to_excel('above_threshold_matches.xlsx', index=False)
# unmatched_values_df.to_excel('unmatched_values.xlsx', index=False)
above_matches_df, unmatched_values_df
#_________________________________________________________________________________________________________

def find_top_matches(source_values, target_values, target_attr_values, top_n=5, threshold=0.6):
    above_threshold = []
    unmatched_values = []
    
    for source_val in source_values:
        matches = []
        
        # Compare with column names
        for target_val in target_values:
            score = fuzzy_match(source_val, target_val)
            matches.append((target_val, score))
        
        # Compare with attribute names
        for target_attr_val in target_attr_values:
            score = fuzzy_match(source_val, target_attr_val)
            matches.append((target_attr_val, score))
        
        # Sort all matches and get the top N
        matches = sorted(matches, key=lambda x: x[1], reverse=True)[:top_n]
        
        has_valid_match = False
        for match in matches:
            if match[1] >= threshold:
                above_threshold.append({
                    'Source Value': source_val,
                    'Matched Value': match[0],
                    'Score': match[1]
                })
                has_valid_match = True
        
        if not has_valid_match:
            unmatched_values.append(source_val)
    
    return above_threshold, unmatched_values

#_____________________________________________________________________________________________________________________
#_____________________________________________________________________________________________________________________

#sample code

import pandas as pd
from thefuzz import fuzz
from difflib import SequenceMatcher

def fuzzy_match(a, b):
    return max(
        SequenceMatcher(None, a, b).ratio(),
        fuzz.ratio(a, b) / 100,
        fuzz.partial_ratio(a, b) / 100,
        fuzz.token_sort_ratio(a, b) / 100
    )

def find_top_matches(source_values, target_df, top_n=5, threshold=0.85):
    above_threshold, unmatched_values = [], []
    target_values = target_df['Column Name'].astype(str).str.lower().tolist()
    target_attr_values = target_df['Attribute Name'].astype(str).str.lower().tolist()
    
    for source_val in source_values:
        matches = [(t, t, fuzzy_match(source_val, t)) for t in target_values]
        matches = sorted(matches, key=lambda x: x[2], reverse=True)[:top_n]
        
        if not any(m[2] >= threshold for m in matches):
            matches = [(target_attr_values[idx], target_df.iloc[idx]['Column Name'], fuzzy_match(source_val, target_attr_values[idx])) for idx in range(len(target_attr_values))]
            matches = sorted(matches, key=lambda x: x[2], reverse=True)[:top_n]
        
        if any(m[2] >= threshold for m in matches):
            above_threshold.extend({
                'Source Value': source_val,
                'Matched Value': m[1],
                'Score': m[2]
            } for m in matches if m[2] >= threshold)
        else:
            unmatched_values.append(source_val)
    
    return above_threshold, unmatched_values

source_df = pd.read_excel(r"C:\Users\tejas\Source.xlsx")
target_df = pd.read_excel(r"C:\Users\tejas\Destination.xlsx")
source_values = source_df['Logical Column Name'].astype(str).str.lower().tolist()
threshold_value = 0.85
above_matches, unmatched_values = find_top_matches(source_values, target_df, threshold=threshold_value)

above_matches_df = pd.DataFrame(above_matches)
unmatched_values_df = pd.DataFrame(unmatched_values, columns=['Unmatched Values'])

above_matches_df, unmatched_values_df
