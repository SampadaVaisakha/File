import re
import nltk
from nltk.corpus import words

# Uncomment this if you haven't already downloaded the 'words' corpus
# nltk.download('words')

# Define the words corpus set
words_1st = set(words.words())

def split_into_words(text):
    # Apply transformations to split and format words in the text
    if re.search(r'id', text):
        text = re.sub(r'([A-Za-z]) (\d)', r'\1 \2', text)
    
    text = re.sub(r'(\d) ([A-Za-z])', r'\1 \2', text)
    text = re.sub(r'([a-z]) ([A-Z])', r'\1 \2', text)

    text = text.lower()  # Convert the text to lowercase for easier processing

    # Initialize result list
    result = []
    n = len(text)
    i = 0

    while i < n:
        found = False
        # Try to find the longest word in the text that is in the words_1st set
        for j in range(n, 1, -1):
            if text[i:i+j] in words_1st:
                result.append(text[i:i+j].capitalize())  # Capitalize and add to result
                i += j  # Move the index forward by the length of the found word
                found = True
                break
        
        if not found:
            # If no word is found, just append the next character
            result.append(text[i].upper())  # Capitalize the current character
            i += 1

    # Handle number/letter combinations like 'H2O'
    result_str = ' '.join(result).upper()
    result_str = re.sub(r'(\d)([A-Za-z])', r'\1 \2', result_str)
    result_str = re.sub(r'([A-Za-z])(\d)', r'\1 \2', result_str)
    
    return result_str

# Test cases
print(split_into_words('SIGNATURESOURCECODE1'))  # Expected: SIGNATURE SOURCE CODE 1
print(split_into_words('O2saturatedquantity'))    # Expected: O2 Saturated Quantity
print(split_into_words('H2OisEssential'))        # Expected: H2O Is Essential
print(split_into_words('CamelCaseExample1'))     # Expected: Camel Case Example 1
print(split_into_words('H2OWaterIsGreat'))       # Expected: H2O Water Is Great
