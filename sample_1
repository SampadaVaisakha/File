import nltk
import re
from nltk.corpus import words

nltk.download('words')
valid_words = set(words.words())

def split_into_words(text):
    result = []

    # Match alphanumeric parts (e.g., O2) and numbers separately
    parts = re.findall(r'[A-Za-z]*\d+[A-Za-z]*|[A-Za-z]+|\d+', text)

    for part in parts:
        # If the part is entirely numeric or alphanumeric (like O2), keep it as is
        if part.isdigit() or re.match(r'^[A-Za-z]*\d+[A-Za-z]*$', part):
            result.append(part)
            continue

        j = 0
        while j < len(part):
            match = ''
            # Try to match longest valid word from nltk corpus
            for k in range(len(part), j, -1):
                if part[j:k].lower() in valid_words or part[j:k] in valid_words:
                    match = part[j:k]
                    result.append(match)
                    j = k  # Move to the next section after the match
                    break

            # If no word is found, split by camel case
            if not match:
                camel_parts = re.findall(r'[A-Z][a-z]*|[a-z]+', part[j:])
                result.extend(camel_parts)
                break
    
    return ' '.join(result)

# Test cases
print(split_into_words('SIGNATURESOURCECODE1'))  # OUTPUT: SIGNATURE SOURCE CODE 1
print(split_into_words('O2saturatedquantity'))    # OUTPUT: O2 saturated quantity
print(split_into_words('CamelCaseExample1'))     # OUTPUT: Camel Case Example 1
print(split_into_words('H2OisEssential'))        # OUTPUT: H2 O is Essential
